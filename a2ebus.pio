.program addrbus 


// All inputs are in terms of absolute GPIO
.define PHI1 11

// In: size 2
// AO_OUT AE_OUT
// Base: 14, count: 2

// Out: size 1
// ADDR_FN
// Base: 7, count: 1

// Side set: size 1 (1 enable bit)
// ADDR_CLK 
// Side base: 5, size count: 1
// We CAN afford the spare bit for optional sideset
.side_set 1 opt

// Jump pin: DEVSEL (pin 10)

loop:
    // Set in parallel load mode, prep for load
    SET pins, 1 side 0
    SET X, 8
    // wait for Q1 to go high
    // 300 nsec later address is valid; set in shift out mode
    WAIT 1 gpio PHI1 [7]
    JMP pin skip side 1 // ignore if devsel is high
    SET pins, 0 // shift register mode
read:
    IN pins, 2 side 0
    JMP X-- read side 1
    PUSH
skip:
    WAIT 0 gpio PHI1


% c-sdk {
static inline void setup_addrbus(PIO pio, uint sm, uint offset) {
    pio_sm_config conf = addrbus_program_get_default_config(offset);
    sm_config_set_out_pins(&conf, 7, 1);
    sm_config_set_set_pins(&conf, 7, 1);
    sm_config_set_in_pins(&conf, 14);
    sm_config_set_sideset_pins(&conf, 5);
    sm_config_set_jmp_pin(&conf, 10);
    sm_config_set_clkdiv(&conf, 1.0);
    pio_gpio_init(pio, 7);
    pio_gpio_init(pio, 5);
    pio_sm_set_pindirs_with_mask(pio, sm, 1<<7 | 1<< 5, 1<<7 | 1<<5);
    pio_sm_init(pio, sm, offset, &conf);
    pio_sm_set_enabled(pio, sm, true);
}

%}

