//
// Assuming the RP2040 is running at 125MHz, an access cycle looks like
// this:
//
// time (nS)|Cycles| Event
// ---------+------+-----------------------
//       0  |    0 | Phi1 rises
//     300  |   38 | ADDR is valid
//     500  |   63 | Phi1 falls
//     700  |   88 | DATA is valid (from CPU)
//     900  |  112 | DATA is valid (to CPU)
//    1000  |  125 | End of cycle (out of time)
//
//
//
// IRQ 

.program addrbus 

.define PHI1 11

// In: AO_OUT AE_OUT (Base 14, count 2)
// Out: ADDR_FN (Base 7, count 1)
// Side set: ADDR_CLK (Base 5, count 1)
.side_set 1

//                                                                     cycles   cumulative
skip:
    WAIT 1 gpio PHI1        side 0 [15] // wait for phi1 to go high         16  16
    SET pins, 1             side 0 [15] // set fn to load register          16  32
    SET X, 8                side 0 [5]                                      6   38
    SET pins, 0             side 1 [1]  // set fn to shift data             2   40
read:
    IN pins, 2              side 0      // read even/odd address bits       1   48 (*8)
    JMP X-- read            side 1 [1]  // shift by 1                       2   64 (*8)
    PUSH                    side 1      // send address to core 1           1   65
    WAIT 0 gpio PHI1        side 0      // wait for phi1 to go low          1   66
    IN pins, 32             side 1      // read in all lines for core 1     1   67
    PUSH                    side 0      // send lines to core 1             1   68
    // cycles from phi1: 68


% c-sdk {
static inline void init_addrbus(PIO pio, uint sm, uint offset) {
    pio_gpio_init(pio,10);
    pio_sm_config conf = addrbus_program_get_default_config(offset);
    sm_config_set_out_pins(&conf, 7, 1);
    sm_config_set_set_pins(&conf, 7, 1);
    sm_config_set_in_pins(&conf, 14);
    sm_config_set_in_shift(&conf, false, false, 0);
    sm_config_set_sideset_pins(&conf, 5);
    sm_config_set_clkdiv(&conf, 1.0);
    pio_gpio_init(pio, 7);
    pio_gpio_init(pio, 5);
    pio_gpio_init(pio, 9);
    pio_gpio_init(pio, 10);
    pio_gpio_init(pio, 12);
    pio_sm_set_pindirs_with_mask(pio, sm, 1<<7 | 1<< 5, 1<<7 | 1<<5);
    pio_sm_init(pio, sm, offset, &conf);
    pio_sm_set_enabled(pio, sm, true);
}

%}

.program data_read

.define PHI1 11

// In: DATA_OUT (Base 13, count 1)
// Set: DATA_FN (Base 3, count 1)
// Side set: DATA_CLK (Base 1, count 1)
.side_set 1

    SET pins, 1         side 0      // Make sure OE is high             1   1
    SET X, 8            side 0      // Load X                           1   2
    PULL block          side 0      // Wait for signal                  1   3
    SET pins, 1         side 1                                          1   4
    SET pins, 0         side 1 [1]                                      2   5
rloop: 
    IN pins, 1          side 0                                          1   13 (*8)
    JMP X-- rloop       side 1 [1]                                      2   28 (*8)
    PUSH                side 0                                          1   29

% c-sdk {
static inline void init_data_read(PIO pio, uint sm, uint offset) {
    pio_sm_config conf = data_read_program_get_default_config(offset);
    sm_config_set_set_pins(&conf, 3, 1);
    sm_config_set_in_pins(&conf, 13);
    sm_config_set_in_shift(&conf, false, false, 0);
    sm_config_set_sideset_pins(&conf, 1);
    sm_config_set_clkdiv(&conf, 1.0);
    pio_gpio_init(pio,1);
    pio_gpio_init(pio,3);
    pio_gpio_init(pio,2);
    pio_gpio_init(pio,13);
    pio_sm_set_pindirs_with_mask(pio, sm, 1<<1 | 1<<2 | 1<<3,
        1<<1 | 1<<2 | 1<<3);
    pio_sm_init(pio, sm, offset, &conf);
    pio_sm_set_enabled(pio, sm, true); 
}

%}

.program data_write

.define PHI1 11

// In: DATA_OUT (Base 13, count 1)
// Set: DATA_OE DATA_FN (Base 2, count 2)
// Out: DATA_IN (Base 0, count 1)
// Side set: DATA_CLK (Base 1, count 1)
.side_set 1

    SET pins, 3         side 0      // Make sure OE is high
    SET X, 7            side 0 
    PULL block          side 0
    // Timing is iffy, let's assume 20 cycles from phi1 low
    SET pins, 1         side 1
wloop:
    OUT pins, 1         side 0 [1]
    JMP X-- wloop       side 1 [1]
    SET pins, 0         side 1
    WAIT 1 gpio PHI1    side 1
    

% c-sdk {
static inline void init_data_write(PIO pio, uint sm, uint offset) {
    pio_sm_config conf = data_write_program_get_default_config(offset);
    sm_config_set_out_pins(&conf, 0, 1);
    sm_config_set_out_shift(&conf, false, false, 0);
    sm_config_set_set_pins(&conf, 2, 2);
    sm_config_set_in_pins(&conf, 13);
    sm_config_set_in_shift(&conf, false, false, 0);
    sm_config_set_sideset_pins(&conf, 1);
    sm_config_set_clkdiv(&conf, 1.0);
    pio_gpio_init(pio,1);
    pio_gpio_init(pio,3);
    pio_gpio_init(pio,0);
    pio_gpio_init(pio,2);
    pio_sm_set_pindirs_with_mask(pio, sm, 1<<0 |1<<1 | 1<<2 | 1<<3,
        1<<0 | 1<<1 | 1<<2 | 1<<3);
    pio_sm_init(pio, sm, offset, &conf);
    pio_sm_set_enabled(pio, sm, true); 
}

%}
